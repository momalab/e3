# Configuration file for tutorials.cpp

# This configuration file should be named 'cgt.cfg' and
# included under the same directory as the source code.

password = hello_world

@sizes = 8

# Thes variable with '@' sign in the front refers to a
# global, but optional, variable. If the bit-sizes for bit-level arithmetic # is not specified by the datatypes defined below, then
# this variable is implemented.

# Below are the datatypes you will create using the cgt.exe tool
# and later use in your C++ source code. Left side of colon is the
# user-defined name. In your source code, you declare 'SecureInt'
# to be [user-defined name][regular datatype] (e.g. NativeInt,
# TypeInt, TypeUint).

# Native is often used to test the compilation of the program
# with faster speed. This does not include a secure encryption.

Native:native
{
	postfix = EN
	postneg = ENn
	msize = 64

# Postfix for constants is optional: if not defined, then
# constants are forbidden in the program. 'Postneg' refers to
# the postfix for negative constants.

}


# Following is to maximize the use of arithmetic circuit in computation,
# which is faster but is incomplete. 'circuit' refers to boolean circuit
# and 'ring' refers to arithmetic circuit. 'bridge' is used to enable
# circuits-to-arithmetic conversion so that some operations can be done
# using boolean circuits and still be incorporated with other arithmetic
# operations.

# Note that currently, only SEAL supports bridging. Therefore, you need to
# install SEAL beforehand. Check the wiki for instructions on how to install
# SEAL.

SealBridge : bridge
{
	encryption = seal
    scheme = bfv
	#encoder = integer
	encoder = batch
	module = bridge.seal
	logn = 15 # 2^15 - polynomial degree
	t = 65537 # 2 - plaintext modulus
}

TypeMint : ring
{
	postfix = Ea
	encryption = @SealBridge
    scheme = bfv
}

Type : circuit
{
	postfix = Ep
	postneg = En
	encryption = @SealBridge
    scheme = bfv
	circuitDB = seal
}
